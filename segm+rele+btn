
 //Segm 0-99 vkljuchenie cherez knopku 1 s klaviaturu

//portide konf
 ldi r16, 0xff  //aktivacija vseh vihodov_portov
 out ddrd, r16
 out ddrb, r16
  ldi r17, 0
 out ddrc, r17

//chistka registrov
 ldi r16, 0xff
 out portd, r16
 ldi r16, 0b1000_0011
 out portb, r16
 ldi r16, 0b0000_0000
 out portb, r16



 ;----------Tabel---------------------------------------------------------------------------------
 
rjmp Knopki            ;pereprigivaet cherez tablicu  hьpatakse programmis kohta nimega Algus, tabel jдetakse programmi tдitmisel vahele
 
Tabel:                  ;mдrgend programmis, mille jдrgi on vхimalik pццrduda siia kohta programmis ja siin                              
.db ~0x3F,~0x06,~0x5b,~0x4f,~0x66,~0x6d,~0x7d,~0x07,~0x7f,~0x6f,0,0    ;dolzno bit parami  tabeli sisu
 
;-----------sьmbolite vхtmine tabelist------------------------------------------------------
Knopki:
ldi r16, 0b1011_1111                        ;registrisse r16 pannakse number 0xfe ehk 0b1111111
out portd, r16         
nop
in r17, pinc                       ;port c sisendis olev info pannakse registrisse r17
andi r17, 0x04                   ;registri r17 sisule tehakse and tehe numbriga 00000010, selline mask                                       ;vхimaldab kontrollida ainult PC1 sisendit
breq Algus
rjmp Knopki

ldi r16, 0b0111_1111           //knopka 3             ;registrisse r16 pannakse number 0xfe ehk 0b1111111
out portd, r16      
nop
in r17, pinc
andi r17, 0x02 
breq relee1
/*
ldi r16, 0b1011_1111          //knopka1
out portd, r16         
nop
in r17, pinc                       ;port c sisendis olev info pannakse registrisse r17
andi r17, 0x04                   ;registri r17 sisule tehakse and tehe numbriga 00000010, selline mask                                       ;vхimaldab kontrollida ainult PC1 sisendit
breq relee2
*/
 //desjatki  levii segment
Algus:    

ldi r31, high(Tabel<<1)  ;registrisse r31 pannakse tabeli alguse aadressi kaheksa vanemat bitti
ldi r30, low(Tabel<<1)   ;registrisse r30 pannakse tabeli alguse aadressi kaheksa nooremat bitti
                                ;nььd on registris Z tabeli alguse aadress
Tsykkel:                   
lpm r25, z+                ;v registre z dannie pomishjajutsja v reg r16 r16 Rd<(Z), Z<Z+1
cpi r25,0                    ;sravnivaetsja r16 s 0,                                  
breq Algus 
   
out portd, r25             ;esli net to vivodim na portd dannie s reg r16
rcall segment1            

push r31    //stop pamjati
push r30

 //pravii segment
 Algus2:                   ;mдrgend programmis, mille jдrgi on vхimalik pццrduda siia kohta programmis
 
ldi r31, high(Tabel<<1)  ;registrisse r31 pannakse tabeli alguse aadressi kaheksa vanemat bitti
ldi r30, low(Tabel<<1)   ;registrisse r30 pannakse tabeli alguse aadressi kaheksa nooremat bitti
                                ;nььd on registris Z tabeli alguse aadress
tsikl2:
lpm r16, z+                ;registris z olevalt aadressilt vхetakse andmed ja pannakse registrisse r16 Rd<(Z), Z<Z+1
cpi r16,0                  ;vхrreldakse registri r16 sisu numbriga 0, kui r16 sisu on vхrdne nulliga, siis                                 ;pannakse staatusregistris nulli lipp ьheks, kui r16 pole vхrdne nulliga on                                 ;staatusregistris nulli lipu vддrtus null
breq memmo                  // vizivaem memmo pamjat ;kui eelmise tehte tulemus oli null, siis hьpatakse kohta nimega Loop, kui                                 ;eelmise tehte tulemus polnud null, siis minnakse jдrgmist kдsku tдitma
                ;esli bred sravnenie bilo ravno togda prigaet v Algus2
out portd, r16             ;registri r16 sisu saadetakse port D vдljundisse
rcall segment2            ;kutsutakse vдlja alamprogramm nimega EnableNr1, E signaali andmiseks
rcall aeg

cpi r25, ~0x5b
brne tsikl2 
cpi r16, ~0x6d                 
breq  relee2 
rjmp tsikl2


relee1:
ldi r18, 0b0010_0000
out portd, r18
rcall relay

ret

relee2:  //kolllaneee
ldi r18, 0b0100_0000   
out portd, r18
rcall relay
rcall aeg
ldi r18, 0b0000_0000   
out portd, r18
rcall relay
rjmp tsikl2

 Memmo:
 pop r30  //vozvrashaem iz pamjati
 pop r31
 rjmp Tsykkel

 relay:
sbi portb, 6       
cbi portb, 6
ret         

segment1:          //levii segm
sbi portb, 1       
cbi portb, 1
ret         

segment2:          //pravii segm
sbi portb, 0       
cbi portb, 0         
ret
 

  aeg:
; ============================= 
;    delay loop generator 
;     1000000 cycles:
; ----------------------------- 
; delaying 999999 cycles:
          ldi  R20, $01
WGLOOP0:  ldi  R18, 0x20
WGLOOP1:  ldi  R21, $0
WGLOOP2:  dec  R21
          brne WGLOOP2
          dec  R18
          brne WGLOOP1
          dec  R20
          brne WGLOOP0
; ----------------------------- 
; delaying 1 cycle:
          nop
; ============================= 


ret //vozvrashenie nazad return


  


